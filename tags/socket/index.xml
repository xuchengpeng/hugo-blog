<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>socket on Chuck</title>
    <link>https://xuchengpeng.github.io/hugo-blog/tags/socket/</link>
    <description>Recent content in socket on Chuck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 May 2018 15:43:47 +0000</lastBuildDate><atom:link href="https://xuchengpeng.github.io/hugo-blog/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP/IP 详解(卷一) TCP：传输控制协议</title>
      <link>https://xuchengpeng.github.io/hugo-blog/post/tcp-ip-illustrated-volume1-tcp-transmission-control-protocol/</link>
      <pubDate>Tue, 15 May 2018 15:43:47 +0000</pubDate>
      
      <guid>https://xuchengpeng.github.io/hugo-blog/post/tcp-ip-illustrated-volume1-tcp-transmission-control-protocol/</guid>
      <description>&lt;p&gt;尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。&lt;/p&gt;
&lt;p&gt;面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个TCP连接。这一过程与打电话很相似，先拨号振铃，等待对方摘机说“喂”，然后才说明是谁。&lt;/p&gt;
&lt;p&gt;在一个TCP连接中，仅有两方进行彼此通信。&lt;/p&gt;
&lt;p&gt;TCP通过下列方式来提供可靠性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段（segment）。&lt;/li&gt;
&lt;li&gt;当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。&lt;/li&gt;
&lt;li&gt;当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒。&lt;/li&gt;
&lt;li&gt;TCP将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。&lt;/li&gt;
&lt;li&gt;既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。&lt;/li&gt;
&lt;li&gt;既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。&lt;/li&gt;
&lt;li&gt;TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
