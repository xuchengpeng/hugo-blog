<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>autoload on Chuck</title>
    <link>https://xuchengpeng.github.io/tags/autoload/</link>
    <description>Recent content in autoload on Chuck</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 06 Sep 2018 11:25:46 +0800</lastBuildDate><atom:link href="https://xuchengpeng.github.io/tags/autoload/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Emacs generate autoloads</title>
      <link>https://xuchengpeng.github.io/post/emacs-generate-autoloads/</link>
      <pubDate>Thu, 06 Sep 2018 11:25:46 +0800</pubDate>
      
      <guid>https://xuchengpeng.github.io/post/emacs-generate-autoloads/</guid>
      <description>&lt;p&gt;The autoload facility lets you register the existence of a function or macro, but put off loading the file that defines it. The first call to the function automatically loads the proper library, in order to install the real definition and other associated code, then runs the real definition as if it had been loaded all along. Autoloading can also be triggered by looking up the documentation of the function or macro.&lt;/p&gt;
&lt;p&gt;A magic autoload comment (often called an autoload cookie) consists of &lt;code&gt;;;;###autoload&lt;/code&gt;, on a line by itself, just before the real definition of the function in its autoloadable source file. The command &lt;code&gt;M-x update-file-autoloads&lt;/code&gt; writes a corresponding autoload call into loaddefs.el. (The string that serves as the autoload cookie and the name of the file generated by &lt;code&gt;update-file-autoloads&lt;/code&gt; can be changed from the above defaults, see below.) Building Emacs loads loaddefs.el and thus calls autoload. &lt;code&gt;M-x update-directory-autoloads&lt;/code&gt; is even more powerful; it updates autoloads for all files in the current directory.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs load packages</title>
      <link>https://xuchengpeng.github.io/post/emacs-load-packages/</link>
      <pubDate>Fri, 11 May 2018 13:51:45 +0000</pubDate>
      
      <guid>https://xuchengpeng.github.io/post/emacs-load-packages/</guid>
      <description>&lt;h2 id=&#34;load&#34;&gt;load&lt;/h2&gt;
&lt;p&gt;load → is the general function for loading a file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-el&#34; data-lang=&#34;el&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NOERROR&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NOMESSAGE&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NOSUFFIX&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MUST-SUFFIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;举个例子，如果你的代码是 &lt;code&gt;(load &amp;quot;x&amp;quot;)&lt;/code&gt;，emacs 将从 load-path 中尝试加载 x.elc、x.el、x 文件。&lt;/p&gt;
&lt;h2 id=&#34;load-file&#34;&gt;load-file&lt;/h2&gt;
&lt;p&gt;load-file → load one specific file. The file name argument should contain file name extension, such as .el .elc&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(load-file file_name)&lt;/code&gt; just calls &lt;code&gt;(load (expand-file-name file_name) nil nil t)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use load-file when you have a specific full path of a file in mind.&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-el&#34; data-lang=&#34;el&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;load-file&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.emacs.d/lisp/init-example.el&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是最为原始的方式，填写的路径必须是绝对路径，这个路径也不会加入到emacs中load-path里。它也不会优先寻找编译过.elc文件（显然编译过文件的会更快些）。这种方式已经被抛弃，仅作为历史提一下。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
